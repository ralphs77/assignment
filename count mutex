#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define ARRAY_SIZE 1000000

int *array;
int length;
int count;
pthread_mutex_t mutex;

void generateRandomArray() {
    array = (int *)malloc(length * sizeof(int));
    for (int i = 0; i < length; i++) {
        array[i] = rand() % 6; // Values between 0 and 5
    }
}

void *count1s(void *arg) {
    int start = *((int *)arg);
    int localCount = 0;

    for (int i = start; i < length; i += 4) {
        if (array[i] == 1) {
            localCount++;
        }
    }

    pthread_mutex_lock(&mutex);
    count += localCount;
    pthread_mutex_unlock(&mutex);

    pthread_exit(NULL);
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        printf("Usage: %s <number_of_threads>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    int numThreads = atoi(argv[1]);
    length = ARRAY_SIZE;
    count = 0;

    generateRandomArray();

    pthread_t threads[numThreads];
    int thread_ids[numThreads];

    pthread_mutex_init(&mutex, NULL);

    for (int i = 0; i < numThreads; i++) {
        thread_ids[i] = i;
        pthread_create(&threads[i], NULL, count1s, (void *)&thread_ids[i]);
    }

    for (int i = 0; i < numThreads; i++) {
        pthread_join(threads[i], NULL);
    }

    pthread_mutex_destroy(&mutex);

    printf("Total count: %d\n", count);

    free(array);

    return 0;
}
